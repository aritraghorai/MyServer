services:
  proxy:
    image: traefik
    container_name: traefik
    depends_on: 
      - authelia
    restart: unless-stopped
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=duckdns"
      - "--certificatesresolvers.letsencrypt.acme.email=mail@mail.com"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.disablePropagationCheck=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.websecure.http.tls.certResolver=letsencrypt"
      - "--entrypoints.websecure.http.tls.domains[0].main=${MY_DOMAIN}"
      - "--entrypoints.websecure.http.tls.domains[0].sans=*.${MY_DOMAIN}"
    volumes:
      - "../data/traefik/letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.api.rule=Host(`${MY_DOMAIN}`)'
      - 'traefik.http.routers.api.entryPoints=websecure'
      - 'traefik.http.routers.api.service=api@internal'
      - 'traefik.http.routers.api.middlewares=authelia@docker'
    ports:
      - "443:443"
      - "80:80"
    environment:
      DUCKDNS_TOKEN: "${DUCKDNS_TOKEN}"

  authelia_redis:
    image: redis
    restart: unless-stopped
    container_name: authelia_redis

  authelia_generate_secrets:
    build: generate_secrets
    volumes:
      - ../data/authelia/secrets:/secrets
  authelia:
    image: authelia/authelia
    container_name: authelia
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.authelia.rule=Host(`auth.${MY_DOMAIN}`)'
      - 'traefik.http.routers.authelia.entryPoints=websecure'
      - 'traefik.http.middlewares.authelia.forwardAuth.address=http://authelia:9091/api/authz/forward-auth'
      - 'traefik.http.middlewares.authelia.forwardAuth.trustForwardHeader=true'
      - 'traefik.http.middlewares.authelia.forwardAuth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Email,Remote-Name'
    depends_on:
      authelia_generate_secrets:
        condition: service_completed_successfully
    volumes:
      - ../data/authelia:/config
    restart: unless-stopped
    expose: 
      - 9091
    environment:
      TZ: Europe/Amsterdam
      X_AUTHELIA_CONFIG_FILTERS: template
      MY_DOMAIN: ${MY_DOMAIN}
      AUTHELIA_IDENTITY_VALIDATION_RESET_PASSWORD_JWT_SECRET_FILE: /config/secrets/JWT_SECRET
      AUTHELIA_SESSION_SECRET_FILE: /config/secrets/SESSION_SECRET
      AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE: /config/secrets/STORAGE_ENCRYPTION_KEY
  deluge:
    container_name: deluge
    image: linuxserver/deluge:latest
    restart: unless-stopped
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.deluge.rule=Host(`deluge.${MY_DOMAIN}`)'
      - 'traefik.http.routers.deluge.entryPoints=websecure'
      - 'traefik.http.routers.deluge.middlewares=authelia@docker'
    environment:
      TZ: Europe/Amsterdam
    volumes:
      - ../data/deluge:/config
      - /mnt/media/Downloads:/downloads
  mysql:
    container_name: mysql
    image: mysql:8.2.0
    restart: always
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.mysql.rule=Host(`mysql.${MY_DOMAIN}`)'
      - 'traefik.http.routers.mysql.entryPoints=websecure'
    environment:
      MYSQL_DATABASE: "db"
      # So you don't have to use root, but you can if you like
      MYSQL_USER: "user"
      # You can use whatever password you like
      MYSQL_PASSWORD: "password"
      # Password for root access
      MYSQL_ROOT_PASSWORD: "password"
    ports:
      # <Port exposed> : <MySQL Port running inside container>
      - "3306:3306"
    expose:
      # Opens port 3306 on the container
      - "3306"
      # Where our data will be persisted
    volumes:
      - ../data/mysql:/var/lib/mysql
  postgres:
    container_name: postgres
    image: pgvector/pgvector:pg16
    restart: always
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.postgres.rule=Host(`postgres.${MY_DOMAIN}`)'
      - 'traefik.http.routers.postgres.entryPoints=websecure'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    logging:
      options:
        max-size: 10m
        max-file: "3"
    ports:
      - "5438:5432"
    volumes:
      - ../data/postgres:/var/lib/postgresql/data
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.portainer.rule=Host(`docker.${MY_DOMAIN}`)'
      - 'traefik.http.routers.portainer.entryPoints=websecure'
    ports:
      - 9443:9443
    volumes:
      - ../data/port/port/data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
  duplicati:
    image: lscr.io/linuxserver/duplicati:latest
    container_name: duplicati
    privileged: true
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.duplicati.rule=Host(`backup.${MY_DOMAIN}`)'
      - 'traefik.http.routers.duplicati.entryPoints=websecure'
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - CLI_ARGS= #optional
    volumes:
      - ../data/duplicati:/config
      - /home/aritra/:/backups
      - ../data/duplicati:/source
    ports:
      - 8200:8200
    restart: unless-stopped
  mongodb:
    container_name: mongodb
    image: mongo:6-jammy
    restart: unless-stopped
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.mongodb.rule=Host(`mongodb.${MY_DOMAIN}`)'
      - 'traefik.http.routers.mongodb.entryPoints=websecure'
    ports:
      - "27017:27017"
    volumes:
      - ../data/mongodb/data:/data/db
  syncthing:
    image: lscr.io/linuxserver/syncthing:latest
    container_name: syncthing
    hostname: syncthing #optional
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.syncthing.rule=Host(`sync.${MY_DOMAIN}`)'
      - 'traefik.http.routers.syncthing.entryPoints=websecure'
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - ../../Services/NginxProxyManager/sync:/config
      - /home/aritra/File/:/data1
      - /home/:/data2
    ports:
      - 8384:8384
      - 22000:22000/tcp
      - 22000:22000/udp
      - 21027:21027/udp
    restart: unless-stopped
  freshrss:
    image: lscr.io/linuxserver/freshrss:latest
    container_name: freshrss
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.freshrss.rule=Host(`rss.${MY_DOMAIN}`)'
      - 'traefik.http.routers.freshrss.entryPoints=websecure'
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - ../data/freshrss:/config
    ports:
      - 8010:80
    restart: unless-stopped
  fullfeedrss:
    image: 'heussd/fivefilters-full-text-rss:latest'
    container_name: fullfeedrss
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.fullfeedrss.rule=Host(`rssExtract.${MY_DOMAIN}`)'
      - 'traefik.http.routers.fullfeedrss.entryPoints=websecure'
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
        # Leave empty to disable admin section
      - FTR_ADMIN_PASSWORD=
    # volumes:
    #   - './rss-cache:/var/www/html/cache/rss'
    ports:
      - '8011:80'
    restart: unless-stopped
